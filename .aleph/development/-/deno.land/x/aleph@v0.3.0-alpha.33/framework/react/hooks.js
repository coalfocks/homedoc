import { useContext, useMemo } from "../../../../../esm.sh/react@17.0.2.js";
import events from "../core/events.js";
import { RouterContext } from "./context.js";
import { inDeno } from "./helper.js";
export class AsyncUseDenoError extends Error {
}
/**
 * `useRouter` returns current `RouterURL` of page routing.
 *
 * ```tsx
 * export default function App() {
 *   const { locale, pathname, routePath, params, query } = useRouter()
 *   return <p>{pathname}</p>
 * }
 * ```
 */ export function useRouter() {
    return useContext(RouterContext);
}
/**
 * `useDeno` hacks in Deno runtime at build time(SSR).
 *
 * ```tsx
 * export default function App() {
 *   const version = useDeno(() => Deno.version.deno)
 *   return <p>{version}</p>
 * }
 * ```
 */ export function useDeno(callback, options) {
    const { key , revalidate  } = options || {
    };
    const uuid = arguments[2]// generated by compiler
    ;
    const router = useRouter();
    const id = useMemo(()=>uuid + (key ? '-' + key : '')
    , [
        key
    ]);
    return useMemo(()=>{
        const store = globalThis;
        const url = router.toString();
        const dataUrl = 'pagedata://' + url;
        const expires = typeof revalidate === 'number' && !isNaN(revalidate) ? Date.now() + revalidate * 1000 : 0;
        if (inDeno) {
            const renderingData = store['rendering-' + dataUrl];
            if (renderingData && id in renderingData) {
                return renderingData[id]; // 2+ pass
            }
            const value = callback();
            events.emit('useDeno-' + dataUrl, {
                id,
                value,
                expires
            });
            // thow an `AsyncUseDenoError` to break current rendering
            if (value instanceof Promise) {
                throw new AsyncUseDenoError();
            }
            renderingData[id] = value;
            return value;
        }
        const data = store[dataUrl + '#' + id];
        return data ? data.value ?? null : null;
    }, [
        id,
        router
    ]);
}

//# sourceMappingURL=hooks.js.map